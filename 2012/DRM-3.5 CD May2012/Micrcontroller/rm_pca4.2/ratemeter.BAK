#define Putc LcdWriteChar
#define  LED_ON			1
#define  LED_OFF		0
sbit BS  = P0^7;

sbit RS = P3^0;
sbit RW = P3^1;
sbit key_intr = P3^2;
sbit PULSE_intr = P3^3;
sbit Edge28 = P3^4;

sbit dLCH = P1^0;
sbit Edge29 = P1^1;
sbit dCLK = P1^2;
sbit PULSE = P1^3;
sbit dDIN = P1^4;
sbit dDOUT = P1^5;
sbit EN = P1^6;
sbit CS =	P1^7;


sbit LED_AL1 = P2^0;//
sbit LED_AL2 = P2^1;//
sbit LED_CC = P2^2;//
sbit RELAY1_S2 = P2^3;
sbit RELAY2_MF = P2^4;
sbit RELAY3_S1 = P2^5;
sbit LED_MF = P2^6;//

unsigned char CntMSec=0;
unsigned char Key;
unsigned char ccon=0;
unsigned int TF16=0;
unsigned int TF16_Old=0;
unsigned int Capture16=0;
unsigned int PulseWidth=0;
unsigned char capLow;
unsigned char capHigh;
unsigned long Count32;
//unsigned long Thresh[2];
float Thresh[2];
unsigned int rCapture16=0;
unsigned long rCount32;
//unsigned long Num = 1;
//unsigned long D;
float Num = 1.0;
float D = 0.0;
unsigned char selThresh=2;
char r;
unsigned char Point;
//bit NegEdge;
bit isInit=0;
//unsigned char Mapping[] = {1,2,3,0x43,4,5,6,0x4C,7,8,9,0x55,0xFE,0,0x4D,0x59};
idata unsigned char Calib[] = {0,0,0,1,3,5,7,9,11,15,0};
idata unsigned char Mapping[] = {1,2,3,'C',4,5,6,'L',7,8,9,'U',0xFE,0,'M','Y'};
idata float filter[10] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
unsigned char dac_value=0;
unsigned char state = 100;
unsigned char command = 0;
unsigned char next = 8;
long factor;
//Function Prototypes
void LcdInit();
void DelayUs(void);
void LcdClear(void);
void LcdWriteStr(char *var);
void LcdWriteCmd(unsigned char c);
void SendToDAC(unsigned int cmd);
void LcdWriteChar(unsigned char var);
void LongToAscii(unsigned long Value);
void LcdGotoXY(unsigned char r,unsigned char c); 
void DispFrequency(float Fr, bit dac_en);

void Delay5us(void)
{
	// Set Timer2 used for 5usec @ 4MHz (24MHz at 6-Clock)
	TL0 = 0xEC;
	TH0 = 0xFF;
	TR0  = 1;
	while(!TF0);
	TR0  = 0;
	TF0  = 0;
}
void Delay10ms(void)
{
	// Set Timer2 used for 10mssec @ 4MHz (24MHz at 6-Clock)
	TL0 = 0;//0xC0;
	TH0 = 0;//0x63;
	TR0  = 1;
	while(!TF0);
	TR0  = 0;
	TF0  = 0;
}

void SendToDAC(unsigned int cmd)
{
	char dCnt;
	unsigned int bits;
	dCLK=0;
	dLCH=0;
	for(dCnt=0;dCnt<16;dCnt++)
	{
		// Put the Data
		bits = (cmd&0x8000)>>15;
		cmd = cmd<<1;
		dDIN = 0;
		if (bits) dDIN = 1;
		Delay5us();
		// Generate the Clock
		dCLK=1;
		Delay5us();
		dCLK=0;
	}
	dLCH=1;
	Delay5us();
	Delay5us();
	dLCH=0;
}

void CountsToFreq(unsigned long C)
{
	float fr;
	float sum = 0.0;
	unsigned char u;
	// Convert to Frequency
	fr = 4000000.0/C;
	// Averaging
	filter[9] = fr;
	for (u=0;u<10;u++)
		sum = sum + filter[u];
	fr = sum/10;//Running or Current Frequency
	for (u=0;u<9;u++)
		filter[u] = filter[u+1];
   //Activate the Commands
	// Check the Range of Frequency, in which You are
	if (fr > 1000) //(Count32 < 4000)
	{
		fr = 1000; //Count32 = 4000;
		command = command | 0x06;	//AL1 = 1 AL2 = 1
	}
	else if (fr >= Thresh[1]) //(Count32 <= Thresh[1])
	{
		command = command | 0x04;	//AL2 = 1
	}
	else if (fr >= Thresh[0]) //(Count32 <= Thresh[0])
	{
	 	command = command | 0x02;	//AL1 = 1
		command = command & 0xFB;	//AL2 = 0
	}
	else if (fr > 0.002) //(Count32 < 4000000000)
	{
	 	command = command & 0xFD;	//AL1 = 0
		command = command & 0xFB;	//AL2 = 0
	}
	else// if (C >= 4000000000)//(fr <= 0.001)
	{
		command = command | 0x10;
		fr = 0.001;//Count32 = 4000000000;
	}
	
	DispFrequency(fr,1);

}
void DispFrequency(float Fr, bit dac_en)
{

	unsigned long W,D;//whole and decimal
	unsigned char Q1;
	// Calibrate
	Q1 = (Fr/100);
	Fr = Fr - Calib[Q1];
	// Separate in Whole and Decimal Part
	W = Fr;
	D = (Fr - W)*1000;
	// Map and Send to DAC (4-20mA)
	Fr = 65535.0*(Fr-0.001)/999.999;
	if(dac_en)
	SendToDAC((unsigned int)(Fr));
	
	// Handle 1000Hz and display Whole part of Freq
	if(W==1000) {Putc('1');W=0;}
	else Putc(' ');
	LongToAscii(W);
	// Display Decimal part of Freq
	Putc('.');
	LongToAscii(D);
}
// Function Definitions
void LongToAscii(unsigned long Value)
{
 //Handles Upto 10 Digits
 //bit isDivisible=0;
 //unsigned long Divisor = 1000000000;
 //unsigned char k;
 unsigned char Q;
 
 Q = (unsigned char )(Value/100);
 LcdWriteChar(Q+48); 
 Value = Value - Q*100;
 
 Q = (unsigned char )(Value/10);
 LcdWriteChar(Q+48); 
 
 Q = (unsigned char )(Value%10);
 LcdWriteChar(Q+48); 
 
 /*if(Value==0)	
 {
 	Putc('0');
 	return;
 }
 for(k=0;k<10;k++)
 {
 	if (Divisor<=Value) isDivisible=1;
	if(isDivisible)
 	{
  	   Q = (unsigned char )(Value/Divisor);
  		LcdWriteChar(Q+48); 
 		Value = Value - (Q)*Divisor;
	}//End if (isDivisible)
	Divisor = Divisor/10;
 }//End for
 */
}
void DelayUs(void)
{
	TL0 = 0x90;TH0 = 0xFE;//200 usec at 22.1184MHz
	TR0  = 1;
	while(!TF0);
	TR0  = 0;
	TF0  = 0;
}
// 8bit LCD Interface
void LcdInit()
{
   LcdWriteCmd(0x38);	//Function Set 0x38
   LcdWriteCmd(0x38);	//Function Set
   LcdWriteCmd(0x38);	//Function Set
	LcdWriteCmd(0x06);	//Entry Mode Set 0x06
   LcdWriteCmd(0x0C);	//Display On  Off Control 0x0C
}

void LcdBusy()
{
	BS   = 1;			//Make D7th bit of LCD as i/p
   EN   = 1;         //Make port pin as o/p
   RS   = 0;         //Selected command register
   RW   = 1;         //We are reading
   while(BS)
   {   					//read busy flag again and again till it becomes 0 Enable H->L
   	EN   = 0;
      EN   = 1;
   }
}
void LcdWriteCmd(unsigned char var)
{
	P0 = var;      	//Commands to be Written
   RS   = 0;        	//Selected command register
   RW   = 0;        	//We are writing in instruction register
   EN   = 1;        	//Enable H->L
   EN   = 0;
   LcdBusy();      //Wait for LCD to process the command
}
void LcdWriteChar(unsigned char var)
{
	P0 = var;      	//Data/Character to be Written
   RS   = 1;         //Selected data register
   RW   = 0;         //We are writing
   EN   = 1;         //Enable H->L
   EN   = 0;
   LcdBusy();      //Wait for LCD to process the command
}
void LcdWriteStr(char *var)
{
	while(*var)       //till string ends send characters one by one
   	LcdWriteChar(*var++);
}

void LcdGotoXY(unsigned char row, unsigned char col)
{
	switch (row)
	{
		case 1: LcdWriteCmd(0x80 + col - 1); break;
		case 2: LcdWriteCmd(0xc0 + col - 1); break;
		case 3: LcdWriteCmd(0x90 + col - 1); break;	//0x90 for 4x20
		case 4: LcdWriteCmd(0xd0 + col - 1); break;	//0xd0 for 4x20
		default: break;
	}
}

void LcdClear()
{
 unsigned char h;
 LcdWriteCmd(0x01);
 for(h=0;h<100;h++)
		DelayUs();
}

